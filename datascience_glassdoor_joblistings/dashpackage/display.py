import dash_core_components as dcc
import dash_html_components as html
from dash.dependencies import Input, Output
from dashpackage.layouts import donut_layout
from dashpackage.queries import interactive_map_data, get_industry_pie_chart, get_stats
from dashpackage import app
import json
import pdb


#We need to refer to ids that are generated by other callbacks and so are not
#in the initial layout
app.config['suppress_callback_exceptions']=True

#this doens't need to be a callback yet as it won't be called on input
def geomap():
    map_data = interactive_map_data()
   # map_data[1]['margin'] = dict(l=10, r=10, t=0, b=0),
    print('LAYOUT', map_data[1])
    return {'data' : map_data[0], 'layout' : map_data[1]}


#layout = [
#    html.Div([
#            
#            html.Div([
#    
#            dcc.Graph(
#        id="map",
#        #style={"height": "90%", "width": "98%"},
#        #config=dict(displayModeBar=False),
#        style={"height": "90%", "width": "98%"},
#        config=dict(displayModeBar=False),
#        figure=geomap()
#        ),
#    dcc.Graph(
#        style={"height": "90%", "width": "98%"},
#        config=dict(displayModeBar=False),
#        )
#    ])
#    style={"marginTop": "5"},
#)
#    ]
    
layout = [
        
# charts row div
    html.Div(
        [
            html.Div(
                [
                    dcc.Graph(
                        id="map",
                       # style={"height": "90%", "width": "98%"},
                        figure=geomap(),
                        config=dict(displayModeBar=False),
                        style={'width':'100%', 'height':'100%'}
                    ),
                ],
                style={'width':'50%', 'display': 'inline-block'}
            ),
                
            html.Div(
                [
                    dcc.Graph(
                        id="pie",
                       # style={"height": "90%", "width": "98%"},
                        config=dict(displayModeBar=False),
                        style={'width':'100%', 'height':'100%'}
                    ),
                ],
                 style={'width':'50%', 'display': 'inline-block'}
            )
                
                
                 
                
#            html.Div([
#                    dcc.Markdown("""
#                                   **Hover Data**
#
#                    Mouse over values in the graph.
#                    """),
#                    html.Pre(id='click-data', style={'border': 'thin lightgrey solid', 'overflowX': 'scroll'})
#                    ] )

                

            
#             html.Div(
#                [
#                    html.P("Leads count per state" ),
#                    dcc.Graph(
#                        id="no",
#                       # style={"height": "90%", "width": "98%"},
#                        figure=geomap(),
#                        config=dict(displayModeBar=False),
#                        style={'width':'100%', 'height':'100%'}
#                    ),
#                ],
#                 style={'width':'50%', 'display': 'inline-block'}
#            )
        ],
        className="row",
        style={'width': '100%', 'display': 'inline-block'}
    ),
                
    html.Div([
            html.H2('**Basic Statistics**'),
            html.Pre(id='stats', style={'border': 'thin lightgrey solid', 'overflowX': 'scroll'})
            ],
        className="row",
        style={'width': '100%', 'display': 'inline-block'}
        )
    ]

#use clickData to update to the correct pie chart and stats!
#@app.callback(Output('click-data', 'children'), [Input('map', 'clickData')])
#def display_click_data(clickData):
#    return json.dumps(clickData, indent=2)
    
@app.callback(Output('stats', 'children'), [Input('map', 'clickData')])
def generate_stats(clickData):
    print('I GOT IN HERE AT LEAST')
    city_name = clickData['points'][0]['text'].split(':')[0]
    stats = get_stats(city_name)
    return 'High Mean Salary Estimate: {}\nLow Mean Salary Estimate: {}\nEstimated Expenses: {}'\
            .format(stats['salary_estimated_hi'], stats['salary_estimated_lo'], stats['expenses'])

#refactor this so you can call an external function and get a nice layout!
@app.callback(Output('pie', 'figure'), [Input('map', 'clickData')])
def update_pie_charts(clickData):
    #hacky way of getting city name
    print('clicked on city = ', clickData['points'][0]['text'].split(':')[0])
    city_name = clickData['points'][0]['text'].split(':')[0]
    return {'data' : get_industry_pie_chart(city_name)}
    


#callbacks work everytime a value gets assigned presumably... the callback sets a watcher on that value and then...
#when the value is assigned to the corresponding function is called and the output variables specified get set
#in this case when we initialise dashboard2... tab_value gets set to display_tab, the callback in dashboard2 then
#returns the layout here... but we don't need to ever change what gets displayed in the map Graph, so we're good to 
#not have a callback here!
                
                
#layout on the page appears to be affected by stylesheets (that decide the width of divs with a given classname and such...)
#e.g. four columns chart_div appears to allow me to put three next to each other!
                
#can play with style= in divsand graphs to get stuff to fit... not really sure why there's so much whitespace around stuff but still